How to use this example FS:
-------------------------------------
 * NOTE: This is a programming example only and not meant for general consumption.

 1. Install fuse 3. (See Fuse3's own docs.)
 2. Install spdlog. (See spdlogs own docs.)
 3. Install Postgres. (See Postgres docs.)
 4. In postgres, setup a DB called "fuse" and under that db, setup a table called "hashes".
 5. The hashes table must have 3 fields:
    hash:   char varying 128
    block:  bytea 4096
    use_count: integer
 6. Edit qube.hpp and change the postgres user data to include your user's username, password, and
    host name/IP.
 7. Compile using:
     g++ -Wall -g qube.cpp -o qubeFS -I /usr/include/fuse3 -I /usr/include/spdlog -lpq -lcrypto -lfuse3 -D_FILE_OFFSET_BITS=64 -pedantic-errors

8. mkdir -p /mnt/Qdata
9. mkdir -p /mnt/Qtest
   Note: Qdata whill be where the de-dupe filesystem mounts. Qtest will be the raw filesystem that
         fuse uses to store the actual hash keys. If you can a file while under Qtest, it will be
         a jumbled list of hex letters that represent a list of hases. If you cat the same file in
         Qdata, the file will query the database and return the actual data you stored in that file.
10. Run the example with the command: qubeFS -f -s -d /mnt/Qtest /mnt/Qdata


NOTE:: THIS IDEA WAS ABANDONED WITH STILL AN IMPORTANT BUG IN THE BACKUPFS. I HAD TO DO THIS BECAUSE I REALIZED I WAS
WORKING IN A DIRECTION OTHER THAN MY MAIN GOAL. MY ORIGINAL PLAN WAS TO GET DE-DUPE FUNCTIONS WORKING WITH FUSE, THEN
TEST AND FLIP IT TO A VFS-STYLE FILESYSTEM. BUT AS I GOT MORE IN-DEPTH WITH THE VFS LAYER, I REALIZED THE CODE I WAS
WORKING ON WOULD ALMOST CERTAINLY NEED TO BE CHANGED, SO IT MADE SENSE TO MOVE IN THAT DIRECTION IMMEDIATELY. THE BUG
REMAINING IN THIS CODE WAS THAT THE FUSE LAYER DOESN'T GIVE A FILE SIZE COMING INTO THE QFS-READ FUNCTION. INSTEAD IT
GIVES THE SIZE OF THE BUFFER IT WANTS TO FILL, WHICH MAY AVE NO RELATION AT ALL TO THE ORIGINAL FILE SIZE OR THE
DE-DUPED FILE SIZE. SO, THERE'S NO WAY TO TELL HOW MANY CACHES THERE WERE IN THE FILE. THERE ARE TWO WAYS TO FIX THIS.
1. STAT THE FILE AND GET THE ACTUAL FILE SIZE OF THE HASHES FILE.
2. SAVE FILE INFO IN THE DATABASE, WHICH WAS REALLY WHERE THIS PROJECT WAS HEADING ALL ALONG.

BECAUSE I REALIZED I PROBABLY NEEDED TO DO OPTION #2, WHICH WOULD TIE BETTER INTO VFS THAN INTO FUSE, SUDDENLY I WASN'T
WORKING ON A BACKUPFS ANYMORE. I DOUBT ANYONE WILL USE THIS CODE, AND IF THEY DO, IT WILL ONLY BE AN EXAMPLE, SO IT
MAKES SENSE TO ABANDON THIS HERE. IF ANYONE NEED ASSISTANCE WITH IT, E-MAIL ME.
